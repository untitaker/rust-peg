// Generated by rust-peg. Do not edit.
#![allow(non_snake_case, unused)]

  use translate::*;
  use std::num::from_str_radix;
  use std::char;

enum ParseResult<T> { Matched(uint, T), Failed, }
fn slice_eq(input: &str, pos: uint, m: &str) -> ParseResult<()> {
    #![inline]
    #![allow(dead_code)]
    let l = m.len();
    if input.len() >= pos + l &&
           input.as_bytes().slice(pos, pos + l) == m.as_bytes() {
        Matched(pos + l, ())
    } else { Failed }
}
fn any_char(input: &str, pos: uint) -> ParseResult<()> {
    #![inline]
    #![allow(dead_code)]
    if input.len() > pos {
        Matched(input.char_range_at(pos).next, ())
    } else { Failed }
}
fn pos_to_line(input: &str, pos: uint) -> uint {
    let mut remaining = pos as int;
    let mut lineno: uint = 1;
    for line in input.lines() {
        remaining -= (line.len() as int) + 1;
        if remaining <= 0 { return lineno; }
        lineno += 1;
    }
    return lineno;
}
fn parse_grammar(input: &str, pos: uint) -> ParseResult<Grammar> {
    {
        let start_pos = pos;
        {
            let seq_res = parse___(input, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            match parse_action(input, pos) {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, header) => {
                                {
                                    let seq_res =
                                        {
                                            let mut repeat_pos = pos;
                                            let mut repeat_value = vec!();
                                            loop  {
                                                let pos = repeat_pos;
                                                let step_res =
                                                    parse_rust_use(input,
                                                                   pos);
                                                match step_res {
                                                    Matched(newpos, value) =>
                                                    {
                                                        repeat_pos = newpos;
                                                        repeat_value.push(value);
                                                    }
                                                    Failed => { break ; }
                                                }
                                            }
                                            Matched(repeat_pos, repeat_value)
                                        };
                                    match seq_res {
                                        Matched(pos, imports) => {
                                            {
                                                let seq_res =
                                                    {
                                                        let mut repeat_pos =
                                                            pos;
                                                        let mut repeat_value =
                                                            vec!();
                                                        loop  {
                                                            let pos =
                                                                repeat_pos;
                                                            let step_res =
                                                                parse_rule(input,
                                                                           pos);
                                                            match step_res {
                                                                Matched(newpos,
                                                                        value)
                                                                => {
                                                                    repeat_pos
                                                                        =
                                                                        newpos;
                                                                    repeat_value.push(value);
                                                                }
                                                                Failed => {
                                                                    break ;
                                                                }
                                                            }
                                                        }
                                                        Matched(repeat_pos,
                                                                repeat_value)
                                                    };
                                                match seq_res {
                                                    Matched(pos, rules) => {
                                                        {
                                                            let match_str =
                                                                input.slice(start_pos,
                                                                            pos);
                                                            Matched(pos,
                                                                    {
                                                                        Grammar{initializer:
                                                                                    header,
                                                                                imports:
                                                                                    imports,
                                                                                rules:
                                                                                    rules,}
                                                                    })
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_rule(input: &str, pos: uint) -> ParseResult<Rule> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_exportflag(input, pos);
            match seq_res {
                Matched(pos, exported) => {
                    {
                        let seq_res = parse_identifier(input, pos);
                        match seq_res {
                            Matched(pos, name) => {
                                {
                                    let seq_res =
                                        parse_returntype(input, pos);
                                    match seq_res {
                                        Matched(pos, returns) => {
                                            {
                                                let seq_res =
                                                    parse_equals(input, pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_expression(input,
                                                                                 pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        expression)
                                                                => {
                                                                    {
                                                                        let seq_res =
                                                                            match parse_semicolon(input,
                                                                                                  pos)
                                                                                {
                                                                                Matched(newpos,
                                                                                        value)
                                                                                =>
                                                                                {
                                                                                    Matched(newpos,
                                                                                            Some(value))
                                                                                }
                                                                                Failed
                                                                                =>
                                                                                {
                                                                                    Matched(pos,
                                                                                            None)
                                                                                }
                                                                            };
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let match_str =
                                                                                        input.slice(start_pos,
                                                                                                    pos);
                                                                                    Matched(pos,
                                                                                            {
                                                                                                Rule{name:
                                                                                                         name,
                                                                                                     expr:
                                                                                                         box() expression,
                                                                                                     ret_type:
                                                                                                         returns,
                                                                                                     exported:
                                                                                                         exported,}
                                                                                            })
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_exportflag(input: &str, pos: uint) -> ParseResult<bool> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res =
                        {
                            let choice_res =
                                slice_eq(input, pos, "#[export]");
                            match choice_res {
                                Matched(pos, value) => Matched(pos, value),
                                Failed => slice_eq(input, pos, "#[pub]"),
                            }
                        };
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res = parse___(input, pos);
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let match_str =
                                                input.slice(start_pos, pos);
                                            Matched(pos, { true })
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res = slice_eq(input, pos, "");
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let match_str = input.slice(start_pos, pos);
                                Matched(pos, { false })
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_returntype(input: &str, pos: uint) -> ParseResult<String> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_returns(input, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    {
                                        let start_pos = pos;
                                        {
                                            let seq_res =
                                                parse_rust_type(input, pos);
                                            match seq_res {
                                                Matched(pos, _) => {
                                                    {
                                                        let match_str =
                                                            input.slice(start_pos,
                                                                        pos);
                                                        Matched(pos,
                                                                {
                                                                    match_str.trim().to_string()
                                                                })
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    };
                                match seq_res {
                                    Matched(pos, tp) => {
                                        {
                                            let match_str =
                                                input.slice(start_pos, pos);
                                            Matched(pos, { tp })
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let match_str = input.slice(start_pos, pos);
                    Matched(pos, { "()".to_string() })
                }
            }
        }
    }
}
fn parse_rust_use(input: &str, pos: uint) -> ParseResult<RustUse> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "use");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res = parse_rust_path(input, pos);
                                    match seq_res {
                                        Matched(pos, p) => {
                                            {
                                                let seq_res =
                                                    parse___(input, pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                {
                                                                    let choice_res =
                                                                        {
                                                                            let start_pos =
                                                                                pos;
                                                                            {
                                                                                let seq_res =
                                                                                    slice_eq(input,
                                                                                             pos,
                                                                                             "::");
                                                                                match seq_res
                                                                                    {
                                                                                    Matched(pos,
                                                                                            _)
                                                                                    =>
                                                                                    {
                                                                                        {
                                                                                            let seq_res =
                                                                                                parse___(input,
                                                                                                         pos);
                                                                                            match seq_res
                                                                                                {
                                                                                                Matched(pos,
                                                                                                        _)
                                                                                                =>
                                                                                                {
                                                                                                    {
                                                                                                        let seq_res =
                                                                                                            slice_eq(input,
                                                                                                                     pos,
                                                                                                                     "*");
                                                                                                        match seq_res
                                                                                                            {
                                                                                                            Matched(pos,
                                                                                                                    _)
                                                                                                            =>
                                                                                                            {
                                                                                                                {
                                                                                                                    let seq_res =
                                                                                                                        parse___(input,
                                                                                                                                 pos);
                                                                                                                    match seq_res
                                                                                                                        {
                                                                                                                        Matched(pos,
                                                                                                                                _)
                                                                                                                        =>
                                                                                                                        {
                                                                                                                            {
                                                                                                                                let match_str =
                                                                                                                                    input.slice(start_pos,
                                                                                                                                                pos);
                                                                                                                                Matched(pos,
                                                                                                                                        {
                                                                                                                                            RustUseGlob(p.clone())
                                                                                                                                        })
                                                                                                                            }
                                                                                                                        }
                                                                                                                        Failed
                                                                                                                        =>
                                                                                                                        Failed,
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            Failed
                                                                                                            =>
                                                                                                            Failed,
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                Failed
                                                                                                =>
                                                                                                Failed,
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    Failed
                                                                                    =>
                                                                                    Failed,
                                                                                }
                                                                            }
                                                                        };
                                                                    match choice_res
                                                                        {
                                                                        Matched(pos,
                                                                                value)
                                                                        =>
                                                                        Matched(pos,
                                                                                value),
                                                                        Failed
                                                                        => {
                                                                            let choice_res =
                                                                                {
                                                                                    let start_pos =
                                                                                        pos;
                                                                                    {
                                                                                        let seq_res =
                                                                                            slice_eq(input,
                                                                                                     pos,
                                                                                                     "::");
                                                                                        match seq_res
                                                                                            {
                                                                                            Matched(pos,
                                                                                                    _)
                                                                                            =>
                                                                                            {
                                                                                                {
                                                                                                    let seq_res =
                                                                                                        parse___(input,
                                                                                                                 pos);
                                                                                                    match seq_res
                                                                                                        {
                                                                                                        Matched(pos,
                                                                                                                _)
                                                                                                        =>
                                                                                                        {
                                                                                                            {
                                                                                                                let seq_res =
                                                                                                                    slice_eq(input,
                                                                                                                             pos,
                                                                                                                             "{");
                                                                                                                match seq_res
                                                                                                                    {
                                                                                                                    Matched(pos,
                                                                                                                            _)
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        {
                                                                                                                            let seq_res =
                                                                                                                                parse___(input,
                                                                                                                                         pos);
                                                                                                                            match seq_res
                                                                                                                                {
                                                                                                                                Matched(pos,
                                                                                                                                        _)
                                                                                                                                =>
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        let seq_res =
                                                                                                                                            {
                                                                                                                                                let mut repeat_pos =
                                                                                                                                                    pos;
                                                                                                                                                let mut repeat_value =
                                                                                                                                                    vec!();
                                                                                                                                                loop 
                                                                                                                                                     {
                                                                                                                                                    let pos =
                                                                                                                                                        repeat_pos;
                                                                                                                                                    let pos =
                                                                                                                                                        if repeat_value.len()
                                                                                                                                                               >
                                                                                                                                                               0
                                                                                                                                                           {
                                                                                                                                                            let sep_res =
                                                                                                                                                                {
                                                                                                                                                                    let seq_res =
                                                                                                                                                                        slice_eq(input,
                                                                                                                                                                                 pos,
                                                                                                                                                                                 ",");
                                                                                                                                                                    match seq_res
                                                                                                                                                                        {
                                                                                                                                                                        Matched(pos,
                                                                                                                                                                                _)
                                                                                                                                                                        =>
                                                                                                                                                                        {
                                                                                                                                                                            parse___(input,
                                                                                                                                                                                     pos)
                                                                                                                                                                        }
                                                                                                                                                                        Failed
                                                                                                                                                                        =>
                                                                                                                                                                        Failed,
                                                                                                                                                                    }
                                                                                                                                                                };
                                                                                                                                                            match sep_res
                                                                                                                                                                {
                                                                                                                                                                Matched(newpos,
                                                                                                                                                                        _)
                                                                                                                                                                =>
                                                                                                                                                                {
                                                                                                                                                                    newpos
                                                                                                                                                                }
                                                                                                                                                                Failed
                                                                                                                                                                =>
                                                                                                                                                                break
                                                                                                                                                                    ,
                                                                                                                                                            }
                                                                                                                                                        } else {
                                                                                                                                                            pos
                                                                                                                                                        };
                                                                                                                                                    let step_res =
                                                                                                                                                        parse_identifier(input,
                                                                                                                                                                         pos);
                                                                                                                                                    match step_res
                                                                                                                                                        {
                                                                                                                                                        Matched(newpos,
                                                                                                                                                                value)
                                                                                                                                                        =>
                                                                                                                                                        {
                                                                                                                                                            repeat_pos
                                                                                                                                                                =
                                                                                                                                                                newpos;
                                                                                                                                                            repeat_value.push(value);
                                                                                                                                                        }
                                                                                                                                                        Failed
                                                                                                                                                        =>
                                                                                                                                                        {
                                                                                                                                                            break
                                                                                                                                                                ;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                if repeat_value.len()
                                                                                                                                                       >=
                                                                                                                                                       1u
                                                                                                                                                   {
                                                                                                                                                    Matched(repeat_pos,
                                                                                                                                                            repeat_value)
                                                                                                                                                } else {
                                                                                                                                                    Failed
                                                                                                                                                }
                                                                                                                                            };
                                                                                                                                        match seq_res
                                                                                                                                            {
                                                                                                                                            Matched(pos,
                                                                                                                                                    names)
                                                                                                                                            =>
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    let seq_res =
                                                                                                                                                        slice_eq(input,
                                                                                                                                                                 pos,
                                                                                                                                                                 "}");
                                                                                                                                                    match seq_res
                                                                                                                                                        {
                                                                                                                                                        Matched(pos,
                                                                                                                                                                _)
                                                                                                                                                        =>
                                                                                                                                                        {
                                                                                                                                                            {
                                                                                                                                                                let seq_res =
                                                                                                                                                                    parse___(input,
                                                                                                                                                                             pos);
                                                                                                                                                                match seq_res
                                                                                                                                                                    {
                                                                                                                                                                    Matched(pos,
                                                                                                                                                                            _)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        {
                                                                                                                                                                            let match_str =
                                                                                                                                                                                input.slice(start_pos,
                                                                                                                                                                                            pos);
                                                                                                                                                                            Matched(pos,
                                                                                                                                                                                    {
                                                                                                                                                                                        RustUseList(p.clone(),
                                                                                                                                                                                                    names)
                                                                                                                                                                                    })
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    Failed
                                                                                                                                                                    =>
                                                                                                                                                                    Failed,
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        Failed
                                                                                                                                                        =>
                                                                                                                                                        Failed,
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            Failed
                                                                                                                                            =>
                                                                                                                                            Failed,
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                Failed
                                                                                                                                =>
                                                                                                                                Failed,
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    Failed
                                                                                                                    =>
                                                                                                                    Failed,
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        Failed
                                                                                                        =>
                                                                                                        Failed,
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            Failed
                                                                                            =>
                                                                                            Failed,
                                                                                        }
                                                                                    }
                                                                                };
                                                                            match choice_res
                                                                                {
                                                                                Matched(pos,
                                                                                        value)
                                                                                =>
                                                                                Matched(pos,
                                                                                        value),
                                                                                Failed
                                                                                =>
                                                                                {
                                                                                    let start_pos =
                                                                                        pos;
                                                                                    {
                                                                                        let seq_res =
                                                                                            slice_eq(input,
                                                                                                     pos,
                                                                                                     "");
                                                                                        match seq_res
                                                                                            {
                                                                                            Matched(pos,
                                                                                                    _)
                                                                                            =>
                                                                                            {
                                                                                                {
                                                                                                    let match_str =
                                                                                                        input.slice(start_pos,
                                                                                                                    pos);
                                                                                                    Matched(pos,
                                                                                                            {
                                                                                                                RustUseSimple(p.clone())
                                                                                                            })
                                                                                                }
                                                                                            }
                                                                                            Failed
                                                                                            =>
                                                                                            Failed,
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                };
                                                            match seq_res {
                                                                Matched(pos,
                                                                        v) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            slice_eq(input,
                                                                                     pos,
                                                                                     ";");
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        parse___(input,
                                                                                                 pos);
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                _)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let match_str =
                                                                                                    input.slice(start_pos,
                                                                                                                pos);
                                                                                                Matched(pos,
                                                                                                        {
                                                                                                            v
                                                                                                        })
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_rust_path(input: &str, pos: uint) -> ParseResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    let mut repeat_value = vec!();
                    loop  {
                        let pos = repeat_pos;
                        let pos =
                            if repeat_value.len() > 0 {
                                let sep_res =
                                    {
                                        let seq_res =
                                            slice_eq(input, pos, "::");
                                        match seq_res {
                                            Matched(pos, _) => {
                                                parse___(input, pos)
                                            }
                                            Failed => Failed,
                                        }
                                    };
                                match sep_res {
                                    Matched(newpos, _) => { newpos }
                                    Failed => break ,
                                }
                            } else { pos };
                        let step_res = parse_identifier(input, pos);
                        match step_res {
                            Matched(newpos, value) => {
                                repeat_pos = newpos;
                                repeat_value.push(value);
                            }
                            Failed => { break ; }
                        }
                    }
                    if repeat_value.len() >= 1u {
                        Matched(repeat_pos, ())
                    } else { Failed }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = input.slice(start_pos, pos);
                        Matched(pos, { match_str.to_string() })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_rust_type(input: &str, pos: uint) -> ParseResult<()> {
    {
        let choice_res =
            {
                let seq_res = slice_eq(input, pos, "()");
                match seq_res {
                    Matched(pos, _) => { parse___(input, pos) }
                    Failed => Failed,
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res =
                    {
                        let seq_res = slice_eq(input, pos, "[");
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res = parse_rust_type(input, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    slice_eq(input, pos, "]");
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        parse___(input, pos)
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    };
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res =
                            {
                                let seq_res = slice_eq(input, pos, "&");
                                match seq_res {
                                    Matched(pos, _) => {
                                        parse_rust_type(input, pos)
                                    }
                                    Failed => Failed,
                                }
                            };
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    {
                                        let seq_res =
                                            parse_identifier(input, pos);
                                        match seq_res {
                                            Matched(pos, _) => {
                                                {
                                                    let seq_res =
                                                        slice_eq(input, pos,
                                                                 "<");
                                                    match seq_res {
                                                        Matched(pos, _) => {
                                                            {
                                                                let seq_res =
                                                                    parse_rust_type(input,
                                                                                    pos);
                                                                match seq_res
                                                                    {
                                                                    Matched(pos,
                                                                            _)
                                                                    => {
                                                                        {
                                                                            let seq_res =
                                                                                slice_eq(input,
                                                                                         pos,
                                                                                         ">");
                                                                            match seq_res
                                                                                {
                                                                                Matched(pos,
                                                                                        _)
                                                                                =>
                                                                                {
                                                                                    parse___(input,
                                                                                             pos)
                                                                                }
                                                                                Failed
                                                                                =>
                                                                                Failed,
                                                                            }
                                                                        }
                                                                    }
                                                                    Failed =>
                                                                    Failed,
                                                                }
                                                            }
                                                        }
                                                        Failed => Failed,
                                                    }
                                                }
                                            }
                                            Failed => Failed,
                                        }
                                    };
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => {
                                        let choice_res =
                                            {
                                                let seq_res =
                                                    parse_identifier(input,
                                                                     pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                slice_eq(input,
                                                                         pos,
                                                                         "::");
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    parse_rust_type(input,
                                                                                    pos)
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            };
                                        match choice_res {
                                            Matched(pos, value) =>
                                            Matched(pos, value),
                                            Failed => {
                                                let choice_res =
                                                    {
                                                        let seq_res =
                                                            slice_eq(input,
                                                                     pos,
                                                                     "(");
                                                        match seq_res {
                                                            Matched(pos, _) =>
                                                            {
                                                                {
                                                                    let seq_res =
                                                                        {
                                                                            let mut repeat_pos =
                                                                                pos;
                                                                            let mut repeat_value =
                                                                                vec!();
                                                                            loop 
                                                                                 {
                                                                                let pos =
                                                                                    repeat_pos;
                                                                                let pos =
                                                                                    if repeat_value.len()
                                                                                           >
                                                                                           0
                                                                                       {
                                                                                        let sep_res =
                                                                                            {
                                                                                                let seq_res =
                                                                                                    parse___(input,
                                                                                                             pos);
                                                                                                match seq_res
                                                                                                    {
                                                                                                    Matched(pos,
                                                                                                            _)
                                                                                                    =>
                                                                                                    {
                                                                                                        {
                                                                                                            let seq_res =
                                                                                                                slice_eq(input,
                                                                                                                         pos,
                                                                                                                         ",");
                                                                                                            match seq_res
                                                                                                                {
                                                                                                                Matched(pos,
                                                                                                                        _)
                                                                                                                =>
                                                                                                                {
                                                                                                                    parse___(input,
                                                                                                                             pos)
                                                                                                                }
                                                                                                                Failed
                                                                                                                =>
                                                                                                                Failed,
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    Failed
                                                                                                    =>
                                                                                                    Failed,
                                                                                                }
                                                                                            };
                                                                                        match sep_res
                                                                                            {
                                                                                            Matched(newpos,
                                                                                                    _)
                                                                                            =>
                                                                                            {
                                                                                                newpos
                                                                                            }
                                                                                            Failed
                                                                                            =>
                                                                                            break
                                                                                                ,
                                                                                        }
                                                                                    } else {
                                                                                        pos
                                                                                    };
                                                                                let step_res =
                                                                                    parse_rust_type(input,
                                                                                                    pos);
                                                                                match step_res
                                                                                    {
                                                                                    Matched(newpos,
                                                                                            value)
                                                                                    =>
                                                                                    {
                                                                                        repeat_pos
                                                                                            =
                                                                                            newpos;
                                                                                        repeat_value.push(value);
                                                                                    }
                                                                                    Failed
                                                                                    =>
                                                                                    {
                                                                                        break
                                                                                            ;
                                                                                    }
                                                                                }
                                                                            }
                                                                            if repeat_value.len()
                                                                                   >=
                                                                                   1u
                                                                               {
                                                                                Matched(repeat_pos,
                                                                                        ())
                                                                            } else {
                                                                                Failed
                                                                            }
                                                                        };
                                                                    match seq_res
                                                                        {
                                                                        Matched(pos,
                                                                                _)
                                                                        => {
                                                                            {
                                                                                let seq_res =
                                                                                    slice_eq(input,
                                                                                             pos,
                                                                                             ")");
                                                                                match seq_res
                                                                                    {
                                                                                    Matched(pos,
                                                                                            _)
                                                                                    =>
                                                                                    {
                                                                                        parse___(input,
                                                                                                 pos)
                                                                                    }
                                                                                    Failed
                                                                                    =>
                                                                                    Failed,
                                                                                }
                                                                            }
                                                                        }
                                                                        Failed
                                                                        =>
                                                                        Failed,
                                                                    }
                                                                }
                                                            }
                                                            Failed => Failed,
                                                        }
                                                    };
                                                match choice_res {
                                                    Matched(pos, value) =>
                                                    Matched(pos, value),
                                                    Failed => {
                                                        let seq_res =
                                                            parse_identifier(input,
                                                                             pos);
                                                        match seq_res {
                                                            Matched(pos, _) =>
                                                            {
                                                                slice_eq(input,
                                                                         pos,
                                                                         "")
                                                            }
                                                            Failed => Failed,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_expression(input: &str, pos: uint) -> ParseResult<Expr> {
    parse_choice(input, pos)
}
fn parse_choice(input: &str, pos: uint) -> ParseResult<Expr> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_sequence(input, pos);
            match seq_res {
                Matched(pos, head) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        {
                                            let start_pos = pos;
                                            {
                                                let seq_res =
                                                    parse_slash(input, pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_sequence(input,
                                                                               pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        s) =>
                                                                {
                                                                    {
                                                                        let match_str =
                                                                            input.slice(start_pos,
                                                                                        pos);
                                                                        Matched(pos,
                                                                                {
                                                                                    s
                                                                                })
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        };
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, tail) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos,
                                            {
                                                if tail.len() > 0 {
                                                    let mut list = tail;
                                                    list.insert(0, head);
                                                    ChoiceExpr(list)
                                                } else { head }
                                            })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_sequence(input: &str, pos: uint) -> ParseResult<Expr> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res =
                        {
                            let mut repeat_pos = pos;
                            let mut repeat_value = vec!();
                            loop  {
                                let pos = repeat_pos;
                                let step_res = parse_labeled(input, pos);
                                match step_res {
                                    Matched(newpos, value) => {
                                        repeat_pos = newpos;
                                        repeat_value.push(value);
                                    }
                                    Failed => { break ; }
                                }
                            }
                            Matched(repeat_pos, repeat_value)
                        };
                    match seq_res {
                        Matched(pos, elements) => {
                            {
                                let seq_res = parse_action(input, pos);
                                match seq_res {
                                    Matched(pos, code) => {
                                        {
                                            let match_str =
                                                input.slice(start_pos, pos);
                                            Matched(pos,
                                                    {
                                                        ActionExpr(elements,
                                                                   code)
                                                    })
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res =
                        {
                            let mut repeat_pos = pos;
                            let mut repeat_value = vec!();
                            loop  {
                                let pos = repeat_pos;
                                let step_res = parse_prefixed(input, pos);
                                match step_res {
                                    Matched(newpos, value) => {
                                        repeat_pos = newpos;
                                        repeat_value.push(value);
                                    }
                                    Failed => { break ; }
                                }
                            }
                            Matched(repeat_pos, repeat_value)
                        };
                    match seq_res {
                        Matched(pos, elements) => {
                            {
                                let match_str = input.slice(start_pos, pos);
                                Matched(pos,
                                        {
                                            if elements.len() != 1 {
                                                SequenceExpr(elements)
                                            } else {
                                                elements.into_iter().next().unwrap()
                                            }
                                        })
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_labeled(input: &str, pos: uint) -> ParseResult<TaggedExpr> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_identifier(input, pos);
                    match seq_res {
                        Matched(pos, label) => {
                            {
                                let seq_res = parse_colon(input, pos);
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let seq_res =
                                                parse_prefixed(input, pos);
                                            match seq_res {
                                                Matched(pos, expression) => {
                                                    {
                                                        let match_str =
                                                            input.slice(start_pos,
                                                                        pos);
                                                        Matched(pos,
                                                                {
                                                                    TaggedExpr{name:
                                                                                   Some(label),
                                                                               expr:
                                                                                   box() expression,}
                                                                })
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res = parse_prefixed(input, pos);
                    match seq_res {
                        Matched(pos, expr) => {
                            {
                                let match_str = input.slice(start_pos, pos);
                                Matched(pos,
                                        {
                                            TaggedExpr{name: None,
                                                       expr: box() expr,}
                                        })
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_prefixed(input: &str, pos: uint) -> ParseResult<Expr> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_dollar(input, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res = parse_suffixed(input, pos);
                                match seq_res {
                                    Matched(pos, expression) => {
                                        {
                                            let match_str =
                                                input.slice(start_pos, pos);
                                            Matched(pos, { expression })
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res =
                    {
                        let start_pos = pos;
                        {
                            let seq_res = parse_and(input, pos);
                            match seq_res {
                                Matched(pos, _) => {
                                    {
                                        let seq_res =
                                            parse_suffixed(input, pos);
                                        match seq_res {
                                            Matched(pos, expression) => {
                                                {
                                                    let match_str =
                                                        input.slice(start_pos,
                                                                    pos);
                                                    Matched(pos,
                                                            {
                                                                PosAssertExpr(box() expression)
                                                            })
                                                }
                                            }
                                            Failed => Failed,
                                        }
                                    }
                                }
                                Failed => Failed,
                            }
                        }
                    };
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res =
                            {
                                let start_pos = pos;
                                {
                                    let seq_res = parse_not(input, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_suffixed(input,
                                                                   pos);
                                                match seq_res {
                                                    Matched(pos, expression)
                                                    => {
                                                        {
                                                            let match_str =
                                                                input.slice(start_pos,
                                                                            pos);
                                                            Matched(pos,
                                                                    {
                                                                        NegAssertExpr(box() expression)
                                                                    })
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            };
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => parse_suffixed(input, pos),
                        }
                    }
                }
            }
        }
    }
}
fn parse_suffixed(input: &str, pos: uint) -> ParseResult<Expr> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_primary(input, pos);
                    match seq_res {
                        Matched(pos, expression) => {
                            {
                                let seq_res = parse_question(input, pos);
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let match_str =
                                                input.slice(start_pos, pos);
                                            Matched(pos,
                                                    {
                                                        OptionalExpr(box() expression)
                                                    })
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res =
                    {
                        let start_pos = pos;
                        {
                            let seq_res = parse_primary(input, pos);
                            match seq_res {
                                Matched(pos, expression) => {
                                    {
                                        let seq_res =
                                            parse_starstar(input, pos);
                                        match seq_res {
                                            Matched(pos, _) => {
                                                {
                                                    let seq_res =
                                                        parse_primary(input,
                                                                      pos);
                                                    match seq_res {
                                                        Matched(pos, sep) => {
                                                            {
                                                                let match_str =
                                                                    input.slice(start_pos,
                                                                                pos);
                                                                Matched(pos,
                                                                        {
                                                                            Repeat(box() expression,
                                                                                   0,
                                                                                   None,
                                                                                   Some(box() sep))
                                                                        })
                                                            }
                                                        }
                                                        Failed => Failed,
                                                    }
                                                }
                                            }
                                            Failed => Failed,
                                        }
                                    }
                                }
                                Failed => Failed,
                            }
                        }
                    };
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res =
                            {
                                let start_pos = pos;
                                {
                                    let seq_res = parse_primary(input, pos);
                                    match seq_res {
                                        Matched(pos, expression) => {
                                            {
                                                let seq_res =
                                                    parse_plusplus(input,
                                                                   pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_primary(input,
                                                                              pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        sep)
                                                                => {
                                                                    {
                                                                        let match_str =
                                                                            input.slice(start_pos,
                                                                                        pos);
                                                                        Matched(pos,
                                                                                {
                                                                                    Repeat(box() expression,
                                                                                           1,
                                                                                           None,
                                                                                           Some(box() sep))
                                                                                })
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            };
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    {
                                        let start_pos = pos;
                                        {
                                            let seq_res =
                                                parse_primary(input, pos);
                                            match seq_res {
                                                Matched(pos, expression) => {
                                                    {
                                                        let seq_res =
                                                            parse_star(input,
                                                                       pos);
                                                        match seq_res {
                                                            Matched(pos, _) =>
                                                            {
                                                                {
                                                                    let match_str =
                                                                        input.slice(start_pos,
                                                                                    pos);
                                                                    Matched(pos,
                                                                            {
                                                                                Repeat(box() expression,
                                                                                       0,
                                                                                       None,
                                                                                       None)
                                                                            })
                                                                }
                                                            }
                                                            Failed => Failed,
                                                        }
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    };
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => {
                                        let choice_res =
                                            {
                                                let start_pos = pos;
                                                {
                                                    let seq_res =
                                                        parse_primary(input,
                                                                      pos);
                                                    match seq_res {
                                                        Matched(pos,
                                                                expression) =>
                                                        {
                                                            {
                                                                let seq_res =
                                                                    parse_plus(input,
                                                                               pos);
                                                                match seq_res
                                                                    {
                                                                    Matched(pos,
                                                                            _)
                                                                    => {
                                                                        {
                                                                            let match_str =
                                                                                input.slice(start_pos,
                                                                                            pos);
                                                                            Matched(pos,
                                                                                    {
                                                                                        Repeat(box() expression,
                                                                                               1,
                                                                                               None,
                                                                                               None)
                                                                                    })
                                                                        }
                                                                    }
                                                                    Failed =>
                                                                    Failed,
                                                                }
                                                            }
                                                        }
                                                        Failed => Failed,
                                                    }
                                                }
                                            };
                                        match choice_res {
                                            Matched(pos, value) =>
                                            Matched(pos, value),
                                            Failed => {
                                                let choice_res =
                                                    {
                                                        let start_pos = pos;
                                                        {
                                                            let seq_res =
                                                                parse_primary(input,
                                                                              pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        expression)
                                                                => {
                                                                    {
                                                                        let seq_res =
                                                                            parse_lbrace(input,
                                                                                         pos);
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        parse_integer(input,
                                                                                                      pos);
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                n)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let seq_res =
                                                                                                    parse_rbrace(input,
                                                                                                                 pos);
                                                                                                match seq_res
                                                                                                    {
                                                                                                    Matched(pos,
                                                                                                            _)
                                                                                                    =>
                                                                                                    {
                                                                                                        {
                                                                                                            let match_str =
                                                                                                                input.slice(start_pos,
                                                                                                                            pos);
                                                                                                            Matched(pos,
                                                                                                                    {
                                                                                                                        Repeat(box() expression,
                                                                                                                               n,
                                                                                                                               Some(n),
                                                                                                                               None)
                                                                                                                    })
                                                                                                        }
                                                                                                    }
                                                                                                    Failed
                                                                                                    =>
                                                                                                    Failed,
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    };
                                                match choice_res {
                                                    Matched(pos, value) =>
                                                    Matched(pos, value),
                                                    Failed => {
                                                        let choice_res =
                                                            {
                                                                let start_pos =
                                                                    pos;
                                                                {
                                                                    let seq_res =
                                                                        parse_primary(input,
                                                                                      pos);
                                                                    match seq_res
                                                                        {
                                                                        Matched(pos,
                                                                                expression)
                                                                        => {
                                                                            {
                                                                                let seq_res =
                                                                                    parse_lbrace(input,
                                                                                                 pos);
                                                                                match seq_res
                                                                                    {
                                                                                    Matched(pos,
                                                                                            _)
                                                                                    =>
                                                                                    {
                                                                                        {
                                                                                            let seq_res =
                                                                                                parse_integer(input,
                                                                                                              pos);
                                                                                            match seq_res
                                                                                                {
                                                                                                Matched(pos,
                                                                                                        min)
                                                                                                =>
                                                                                                {
                                                                                                    {
                                                                                                        let seq_res =
                                                                                                            parse_comma(input,
                                                                                                                        pos);
                                                                                                        match seq_res
                                                                                                            {
                                                                                                            Matched(pos,
                                                                                                                    _)
                                                                                                            =>
                                                                                                            {
                                                                                                                {
                                                                                                                    let seq_res =
                                                                                                                        match parse_integer(input,
                                                                                                                                            pos)
                                                                                                                            {
                                                                                                                            Matched(newpos,
                                                                                                                                    value)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                Matched(newpos,
                                                                                                                                        Some(value))
                                                                                                                            }
                                                                                                                            Failed
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                Matched(pos,
                                                                                                                                        None)
                                                                                                                            }
                                                                                                                        };
                                                                                                                    match seq_res
                                                                                                                        {
                                                                                                                        Matched(pos,
                                                                                                                                max)
                                                                                                                        =>
                                                                                                                        {
                                                                                                                            {
                                                                                                                                let seq_res =
                                                                                                                                    parse_rbrace(input,
                                                                                                                                                 pos);
                                                                                                                                match seq_res
                                                                                                                                    {
                                                                                                                                    Matched(pos,
                                                                                                                                            _)
                                                                                                                                    =>
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            let match_str =
                                                                                                                                                input.slice(start_pos,
                                                                                                                                                            pos);
                                                                                                                                            Matched(pos,
                                                                                                                                                    {
                                                                                                                                                        Repeat(box() expression,
                                                                                                                                                               min,
                                                                                                                                                               max,
                                                                                                                                                               None)
                                                                                                                                                    })
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    Failed
                                                                                                                                    =>
                                                                                                                                    Failed,
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        Failed
                                                                                                                        =>
                                                                                                                        Failed,
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            Failed
                                                                                                            =>
                                                                                                            Failed,
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                Failed
                                                                                                =>
                                                                                                Failed,
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    Failed
                                                                                    =>
                                                                                    Failed,
                                                                                }
                                                                            }
                                                                        }
                                                                        Failed
                                                                        =>
                                                                        Failed,
                                                                    }
                                                                }
                                                            };
                                                        match choice_res {
                                                            Matched(pos,
                                                                    value) =>
                                                            Matched(pos,
                                                                    value),
                                                            Failed => {
                                                                let choice_res =
                                                                    {
                                                                        let start_pos =
                                                                            pos;
                                                                        {
                                                                            let seq_res =
                                                                                parse_primary(input,
                                                                                              pos);
                                                                            match seq_res
                                                                                {
                                                                                Matched(pos,
                                                                                        expression)
                                                                                =>
                                                                                {
                                                                                    {
                                                                                        let seq_res =
                                                                                            parse_lbrace(input,
                                                                                                         pos);
                                                                                        match seq_res
                                                                                            {
                                                                                            Matched(pos,
                                                                                                    _)
                                                                                            =>
                                                                                            {
                                                                                                {
                                                                                                    let seq_res =
                                                                                                        parse_comma(input,
                                                                                                                    pos);
                                                                                                    match seq_res
                                                                                                        {
                                                                                                        Matched(pos,
                                                                                                                _)
                                                                                                        =>
                                                                                                        {
                                                                                                            {
                                                                                                                let seq_res =
                                                                                                                    match parse_integer(input,
                                                                                                                                        pos)
                                                                                                                        {
                                                                                                                        Matched(newpos,
                                                                                                                                value)
                                                                                                                        =>
                                                                                                                        {
                                                                                                                            Matched(newpos,
                                                                                                                                    Some(value))
                                                                                                                        }
                                                                                                                        Failed
                                                                                                                        =>
                                                                                                                        {
                                                                                                                            Matched(pos,
                                                                                                                                    None)
                                                                                                                        }
                                                                                                                    };
                                                                                                                match seq_res
                                                                                                                    {
                                                                                                                    Matched(pos,
                                                                                                                            max)
                                                                                                                    =>
                                                                                                                    {
                                                                                                                        {
                                                                                                                            let seq_res =
                                                                                                                                parse_rbrace(input,
                                                                                                                                             pos);
                                                                                                                            match seq_res
                                                                                                                                {
                                                                                                                                Matched(pos,
                                                                                                                                        _)
                                                                                                                                =>
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        let match_str =
                                                                                                                                            input.slice(start_pos,
                                                                                                                                                        pos);
                                                                                                                                        Matched(pos,
                                                                                                                                                {
                                                                                                                                                    Repeat(box() expression,
                                                                                                                                                           0,
                                                                                                                                                           max,
                                                                                                                                                           None)
                                                                                                                                                })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                Failed
                                                                                                                                =>
                                                                                                                                Failed,
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    Failed
                                                                                                                    =>
                                                                                                                    Failed,
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        Failed
                                                                                                        =>
                                                                                                        Failed,
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            Failed
                                                                                            =>
                                                                                            Failed,
                                                                                        }
                                                                                    }
                                                                                }
                                                                                Failed
                                                                                =>
                                                                                Failed,
                                                                            }
                                                                        }
                                                                    };
                                                                match choice_res
                                                                    {
                                                                    Matched(pos,
                                                                            value)
                                                                    =>
                                                                    Matched(pos,
                                                                            value),
                                                                    Failed =>
                                                                    parse_primary(input,
                                                                                  pos),
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_primary(input: &str, pos: uint) -> ParseResult<Expr> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_identifier(input, pos);
                    match seq_res {
                        Matched(pos, name) => {
                            {
                                let seq_res =
                                    {
                                        let assert_res =
                                            {
                                                let seq_res =
                                                    match parse_string(input,
                                                                       pos) {
                                                        Matched(newpos, value)
                                                        => {
                                                            Matched(newpos,
                                                                    Some(value))
                                                        }
                                                        Failed => {
                                                            Matched(pos, None)
                                                        }
                                                    };
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_returntype(input,
                                                                                 pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    parse_equals(input,
                                                                                 pos)
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            };
                                        match assert_res {
                                            Failed => Matched(pos, ()),
                                            Matched(..) => Failed,
                                        }
                                    };
                                match seq_res {
                                    Matched(pos, _) => {
                                        {
                                            let match_str =
                                                input.slice(start_pos, pos);
                                            Matched(pos, { RuleExpr(name) })
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_literal(input, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res = parse_class(input, pos);
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    {
                                        let start_pos = pos;
                                        {
                                            let seq_res =
                                                parse_dot(input, pos);
                                            match seq_res {
                                                Matched(pos, _) => {
                                                    {
                                                        let match_str =
                                                            input.slice(start_pos,
                                                                        pos);
                                                        Matched(pos,
                                                                {
                                                                    AnyCharExpr
                                                                })
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    };
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => {
                                        let start_pos = pos;
                                        {
                                            let seq_res =
                                                parse_lparen(input, pos);
                                            match seq_res {
                                                Matched(pos, _) => {
                                                    {
                                                        let seq_res =
                                                            parse_expression(input,
                                                                             pos);
                                                        match seq_res {
                                                            Matched(pos,
                                                                    expression)
                                                            => {
                                                                {
                                                                    let seq_res =
                                                                        parse_rparen(input,
                                                                                     pos);
                                                                    match seq_res
                                                                        {
                                                                        Matched(pos,
                                                                                _)
                                                                        => {
                                                                            {
                                                                                let match_str =
                                                                                    input.slice(start_pos,
                                                                                                pos);
                                                                                Matched(pos,
                                                                                        {
                                                                                            expression
                                                                                        })
                                                                            }
                                                                        }
                                                                        Failed
                                                                        =>
                                                                        Failed,
                                                                    }
                                                                }
                                                            }
                                                            Failed => Failed,
                                                        }
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_action(input: &str, pos: uint) -> ParseResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_braced(input, pos);
            match seq_res {
                Matched(pos, braced) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos, { braced })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_braced(input: &str, pos: uint) -> ParseResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "{");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        {
                                            let choice_res =
                                                {
                                                    let seq_res =
                                                        parse_braced(input,
                                                                     pos);
                                                    match seq_res {
                                                        Matched(pos, _) => {
                                                            slice_eq(input,
                                                                     pos, "")
                                                        }
                                                        Failed => Failed,
                                                    }
                                                };
                                            match choice_res {
                                                Matched(pos, value) =>
                                                Matched(pos, value),
                                                Failed =>
                                                parse_nonBraceCharacters(input,
                                                                         pos),
                                            }
                                        };
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, ())
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res = slice_eq(input, pos, "}");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Matched(pos,
                                                        {
                                                            match_str.to_string()
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_nonBraceCharacters(input: &str, pos: uint) -> ParseResult<()> {
    {
        let mut repeat_pos = pos;
        let mut repeat_value = vec!();
        loop  {
            let pos = repeat_pos;
            let step_res = parse_nonBraceCharacter(input, pos);
            match step_res {
                Matched(newpos, value) => {
                    repeat_pos = newpos;
                    repeat_value.push(value);
                }
                Failed => { break ; }
            }
        }
        if repeat_value.len() >= 1u {
            Matched(repeat_pos, ())
        } else { Failed }
    }
}
fn parse_nonBraceCharacter(input: &str, pos: uint) -> ParseResult<()> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch { '{' | '}' => Failed, _ => Matched(next, ()), }
    } else { Failed }
}
fn parse_equals(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "=");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_colon(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, ":");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_semicolon(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, ";");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_slash(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "/");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_and(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "&");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_not(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "!");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_dollar(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "$");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_question(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "?");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_star(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "*");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_starstar(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "**");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_plus(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "+");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_plusplus(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "++");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_lparen(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "(");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_rparen(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, ")");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_dot(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, ".");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_returns(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "->");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_lbrace(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "{");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_rbrace(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "}");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_comma(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, ",");
        match seq_res {
            Matched(pos, _) => { parse___(input, pos) }
            Failed => Failed,
        }
    }
}
fn parse_integer(input: &str, pos: uint) -> ParseResult<uint> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let start_pos = pos;
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        if input.len() > pos {
                                            let ::std::str::CharRange {
                                                    ch: ch, next: next } =
                                                input.char_range_at(pos);
                                            match ch {
                                                '0' ...'9' =>
                                                Matched(next, ()),
                                                _ => Failed,
                                            }
                                        } else { Failed };
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                if repeat_value.len() >= 1u {
                                    Matched(repeat_pos, ())
                                } else { Failed }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos,
                                            {
                                                from_str::<uint>(match_str).unwrap()
                                            })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                };
            match seq_res {
                Matched(pos, i) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos, { i })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_identifier(input: &str, pos: uint) -> ParseResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let start_pos = pos;
                    {
                        let seq_res =
                            {
                                let choice_res = parse_letter(input, pos);
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => slice_eq(input, pos, "_"),
                                }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        {
                                            let mut repeat_pos = pos;
                                            loop  {
                                                let pos = repeat_pos;
                                                let step_res =
                                                    {
                                                        let choice_res =
                                                            parse_letter(input,
                                                                         pos);
                                                        match choice_res {
                                                            Matched(pos,
                                                                    value) =>
                                                            Matched(pos,
                                                                    value),
                                                            Failed => {
                                                                let choice_res =
                                                                    parse_digit(input,
                                                                                pos);
                                                                match choice_res
                                                                    {
                                                                    Matched(pos,
                                                                            value)
                                                                    =>
                                                                    Matched(pos,
                                                                            value),
                                                                    Failed =>
                                                                    slice_eq(input,
                                                                             pos,
                                                                             "_"),
                                                                }
                                                            }
                                                        }
                                                    };
                                                match step_res {
                                                    Matched(newpos, value) =>
                                                    {
                                                        repeat_pos = newpos;
                                                    }
                                                    Failed => { break ; }
                                                }
                                            }
                                            Matched(repeat_pos, ())
                                        };
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Matched(pos,
                                                        {
                                                            match_str.to_string()
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                };
            match seq_res {
                Matched(pos, chars) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos, { chars })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_literal(input: &str, pos: uint) -> ParseResult<Expr> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let choice_res = parse_doubleQuotedString(input, pos);
                    match choice_res {
                        Matched(pos, value) => Matched(pos, value),
                        Failed => parse_singleQuotedString(input, pos),
                    }
                };
            match seq_res {
                Matched(pos, value) => {
                    {
                        let seq_res =
                            match slice_eq(input, pos, "i") {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, flags) => {
                                {
                                    let seq_res = parse___(input, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Matched(pos,
                                                        {
                                                            LiteralExpr(value)
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_string(input: &str, pos: uint) -> ParseResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let choice_res = parse_doubleQuotedString(input, pos);
                    match choice_res {
                        Matched(pos, value) => Matched(pos, value),
                        Failed => parse_singleQuotedString(input, pos),
                    }
                };
            match seq_res {
                Matched(pos, string) => {
                    {
                        let seq_res = parse___(input, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos, { string })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_doubleQuotedString(input: &str, pos: uint) -> ParseResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\"");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_doubleQuotedCharacter(input,
                                                                    pos);
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, s) => {
                                {
                                    let seq_res = slice_eq(input, pos, "\"");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Matched(pos,
                                                        {
                                                            String::from_chars(s.as_slice())
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_doubleQuotedCharacter(input: &str, pos: uint) -> ParseResult<char> {
    {
        let choice_res = parse_simpleDoubleQuotedCharacter(input, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_simpleEscapeSequence(input, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res = parse_zeroEscapeSequence(input, pos);
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    parse_hex2EscapeSequence(input, pos);
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => {
                                        let choice_res =
                                            parse_hex4EscapeSequence(input,
                                                                     pos);
                                        match choice_res {
                                            Matched(pos, value) =>
                                            Matched(pos, value),
                                            Failed => {
                                                let choice_res =
                                                    parse_hex8EscapeSequence(input,
                                                                             pos);
                                                match choice_res {
                                                    Matched(pos, value) =>
                                                    Matched(pos, value),
                                                    Failed =>
                                                    parse_eolEscapeSequence(input,
                                                                            pos),
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_simpleDoubleQuotedCharacter(input: &str, pos: uint) ->
 ParseResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let assert_res =
                        {
                            let choice_res = slice_eq(input, pos, "\"");
                            match choice_res {
                                Matched(pos, value) => Matched(pos, value),
                                Failed => {
                                    let choice_res =
                                        slice_eq(input, pos, "\\");
                                    match choice_res {
                                        Matched(pos, value) =>
                                        Matched(pos, value),
                                        Failed => parse_eolChar(input, pos),
                                    }
                                }
                            }
                        };
                    match assert_res {
                        Failed => Matched(pos, ()),
                        Matched(..) => Failed,
                    }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = any_char(input, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos, { match_str.char_at(0) })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_singleQuotedString(input: &str, pos: uint) -> ParseResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\'");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_singleQuotedCharacter(input,
                                                                    pos);
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, s) => {
                                {
                                    let seq_res = slice_eq(input, pos, "\'");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Matched(pos,
                                                        {
                                                            String::from_chars(s.as_slice())
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_singleQuotedCharacter(input: &str, pos: uint) -> ParseResult<char> {
    {
        let choice_res = parse_simpleSingleQuotedCharacter(input, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_simpleEscapeSequence(input, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res = parse_zeroEscapeSequence(input, pos);
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    parse_hex2EscapeSequence(input, pos);
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => {
                                        let choice_res =
                                            parse_hex4EscapeSequence(input,
                                                                     pos);
                                        match choice_res {
                                            Matched(pos, value) =>
                                            Matched(pos, value),
                                            Failed => {
                                                let choice_res =
                                                    parse_hex8EscapeSequence(input,
                                                                             pos);
                                                match choice_res {
                                                    Matched(pos, value) =>
                                                    Matched(pos, value),
                                                    Failed =>
                                                    parse_eolEscapeSequence(input,
                                                                            pos),
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_simpleSingleQuotedCharacter(input: &str, pos: uint) ->
 ParseResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let assert_res =
                        {
                            let choice_res = slice_eq(input, pos, "\'");
                            match choice_res {
                                Matched(pos, value) => Matched(pos, value),
                                Failed => {
                                    let choice_res =
                                        slice_eq(input, pos, "\\");
                                    match choice_res {
                                        Matched(pos, value) =>
                                        Matched(pos, value),
                                        Failed => parse_eolChar(input, pos),
                                    }
                                }
                            }
                        };
                    match assert_res {
                        Failed => Matched(pos, ()),
                        Matched(..) => Failed,
                    }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = any_char(input, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos, { match_str.char_at(0) })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_class(input: &str, pos: uint) -> ParseResult<Expr> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "[");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            match slice_eq(input, pos, "^") {
                                Matched(newpos, value) => {
                                    Matched(newpos, Some(value))
                                }
                                Failed => { Matched(pos, None) }
                            };
                        match seq_res {
                            Matched(pos, inverted) => {
                                {
                                    let seq_res =
                                        {
                                            let mut repeat_pos = pos;
                                            let mut repeat_value = vec!();
                                            loop  {
                                                let pos = repeat_pos;
                                                let step_res =
                                                    {
                                                        let choice_res =
                                                            parse_classCharacterRange(input,
                                                                                      pos);
                                                        match choice_res {
                                                            Matched(pos,
                                                                    value) =>
                                                            Matched(pos,
                                                                    value),
                                                            Failed =>
                                                            parse_classCharacter(input,
                                                                                 pos),
                                                        }
                                                    };
                                                match step_res {
                                                    Matched(newpos, value) =>
                                                    {
                                                        repeat_pos = newpos;
                                                        repeat_value.push(value);
                                                    }
                                                    Failed => { break ; }
                                                }
                                            }
                                            Matched(repeat_pos, repeat_value)
                                        };
                                    match seq_res {
                                        Matched(pos, parts) => {
                                            {
                                                let seq_res =
                                                    slice_eq(input, pos, "]");
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                match slice_eq(input,
                                                                               pos,
                                                                               "i")
                                                                    {
                                                                    Matched(newpos,
                                                                            value)
                                                                    => {
                                                                        Matched(newpos,
                                                                                Some(value))
                                                                    }
                                                                    Failed =>
                                                                    {
                                                                        Matched(pos,
                                                                                None)
                                                                    }
                                                                };
                                                            match seq_res {
                                                                Matched(pos,
                                                                        flags)
                                                                => {
                                                                    {
                                                                        let seq_res =
                                                                            parse___(input,
                                                                                     pos);
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let match_str =
                                                                                        input.slice(start_pos,
                                                                                                    pos);
                                                                                    Matched(pos,
                                                                                            {
                                                                                                CharSetExpr(inverted.is_some(),
                                                                                                            parts)
                                                                                            })
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_classCharacterRange(input: &str, pos: uint) ->
 ParseResult<CharSetCase> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_bracketDelimitedCharacter(input, pos);
            match seq_res {
                Matched(pos, begin) => {
                    {
                        let seq_res = slice_eq(input, pos, "-");
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        parse_bracketDelimitedCharacter(input,
                                                                        pos);
                                    match seq_res {
                                        Matched(pos, end) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Matched(pos,
                                                        {
                                                            CharSetCase{start:
                                                                            begin,
                                                                        end:
                                                                            end,}
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_classCharacter(input: &str, pos: uint) -> ParseResult<CharSetCase> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_bracketDelimitedCharacter(input, pos);
            match seq_res {
                Matched(pos, char_) => {
                    {
                        let match_str = input.slice(start_pos, pos);
                        Matched(pos,
                                { CharSetCase{start: char_, end: char_,} })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_bracketDelimitedCharacter(input: &str, pos: uint) ->
 ParseResult<char> {
    {
        let choice_res = parse_simpleBracketDelimitedCharacter(input, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_simpleEscapeSequence(input, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res = parse_zeroEscapeSequence(input, pos);
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    parse_hex2EscapeSequence(input, pos);
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => {
                                        let choice_res =
                                            parse_hex4EscapeSequence(input,
                                                                     pos);
                                        match choice_res {
                                            Matched(pos, value) =>
                                            Matched(pos, value),
                                            Failed => {
                                                let choice_res =
                                                    parse_hex8EscapeSequence(input,
                                                                             pos);
                                                match choice_res {
                                                    Matched(pos, value) =>
                                                    Matched(pos, value),
                                                    Failed =>
                                                    parse_eolEscapeSequence(input,
                                                                            pos),
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_simpleBracketDelimitedCharacter(input: &str, pos: uint) ->
 ParseResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let assert_res =
                        {
                            let choice_res = slice_eq(input, pos, "]");
                            match choice_res {
                                Matched(pos, value) => Matched(pos, value),
                                Failed => {
                                    let choice_res =
                                        slice_eq(input, pos, "\\");
                                    match choice_res {
                                        Matched(pos, value) =>
                                        Matched(pos, value),
                                        Failed => parse_eolChar(input, pos),
                                    }
                                }
                            }
                        };
                    match assert_res {
                        Failed => Matched(pos, ()),
                        Matched(..) => Failed,
                    }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = any_char(input, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos, { match_str.char_at(0) })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_simpleEscapeSequence(input: &str, pos: uint) -> ParseResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let assert_res =
                                    {
                                        let choice_res =
                                            parse_digit(input, pos);
                                        match choice_res {
                                            Matched(pos, value) =>
                                            Matched(pos, value),
                                            Failed => {
                                                let choice_res =
                                                    slice_eq(input, pos, "x");
                                                match choice_res {
                                                    Matched(pos, value) =>
                                                    Matched(pos, value),
                                                    Failed => {
                                                        let choice_res =
                                                            slice_eq(input,
                                                                     pos,
                                                                     "u");
                                                        match choice_res {
                                                            Matched(pos,
                                                                    value) =>
                                                            Matched(pos,
                                                                    value),
                                                            Failed => {
                                                                let choice_res =
                                                                    slice_eq(input,
                                                                             pos,
                                                                             "U");
                                                                match choice_res
                                                                    {
                                                                    Matched(pos,
                                                                            value)
                                                                    =>
                                                                    Matched(pos,
                                                                            value),
                                                                    Failed =>
                                                                    parse_eolChar(input,
                                                                                  pos),
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                match assert_res {
                                    Failed => Matched(pos, ()),
                                    Matched(..) => Failed,
                                }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res = any_char(input, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    input.slice(start_pos,
                                                                pos);
                                                Matched(pos,
                                                        {
                                                            match match_str.char_at(1)
                                                                {
                                                                'n' => '\n',
                                                                'r' => '\r',
                                                                't' => '\t',
                                                                x => x,
                                                            }
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_zeroEscapeSequence(input: &str, pos: uint) -> ParseResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\0");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let assert_res = parse_digit(input, pos);
                                match assert_res {
                                    Failed => Matched(pos, ()),
                                    Matched(..) => Failed,
                                }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos, { 0u8 as char })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_hex2EscapeSequence(input: &str, pos: uint) -> ParseResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\x");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let start_pos = pos;
                                {
                                    let seq_res = parse_hexDigit(input, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_hexDigit(input,
                                                                   pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let match_str =
                                                                input.slice(start_pos,
                                                                            pos);
                                                            Matched(pos,
                                                                    {
                                                                        from_str_radix::<int>(match_str,
                                                                                              16)
                                                                    })
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            };
                        match seq_res {
                            Matched(pos, value) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos,
                                            {
                                                char::from_u32(value.unwrap()
                                                                   as
                                                                   u32).unwrap()
                                            })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_hex4EscapeSequence(input: &str, pos: uint) -> ParseResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\u");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let start_pos = pos;
                                {
                                    let seq_res = parse_hexDigit(input, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_hexDigit(input,
                                                                   pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_hexDigit(input,
                                                                               pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            parse_hexDigit(input,
                                                                                           pos);
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let match_str =
                                                                                        input.slice(start_pos,
                                                                                                    pos);
                                                                                    Matched(pos,
                                                                                            {
                                                                                                from_str_radix::<int>(match_str,
                                                                                                                      16)
                                                                                            })
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            };
                        match seq_res {
                            Matched(pos, value) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos,
                                            {
                                                char::from_u32(value.unwrap()
                                                                   as
                                                                   u32).unwrap()
                                            })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_hex8EscapeSequence(input: &str, pos: uint) -> ParseResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\U");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let start_pos = pos;
                                {
                                    let seq_res = parse_hexDigit(input, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_hexDigit(input,
                                                                   pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_hexDigit(input,
                                                                               pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            parse_hexDigit(input,
                                                                                           pos);
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        parse_hexDigit(input,
                                                                                                       pos);
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                _)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let seq_res =
                                                                                                    parse_hexDigit(input,
                                                                                                                   pos);
                                                                                                match seq_res
                                                                                                    {
                                                                                                    Matched(pos,
                                                                                                            _)
                                                                                                    =>
                                                                                                    {
                                                                                                        {
                                                                                                            let seq_res =
                                                                                                                parse_hexDigit(input,
                                                                                                                               pos);
                                                                                                            match seq_res
                                                                                                                {
                                                                                                                Matched(pos,
                                                                                                                        _)
                                                                                                                =>
                                                                                                                {
                                                                                                                    {
                                                                                                                        let seq_res =
                                                                                                                            parse_hexDigit(input,
                                                                                                                                           pos);
                                                                                                                        match seq_res
                                                                                                                            {
                                                                                                                            Matched(pos,
                                                                                                                                    _)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    let match_str =
                                                                                                                                        input.slice(start_pos,
                                                                                                                                                    pos);
                                                                                                                                    Matched(pos,
                                                                                                                                            {
                                                                                                                                                from_str_radix::<int>(match_str,
                                                                                                                                                                      16)
                                                                                                                                            })
                                                                                                                                }
                                                                                                                            }
                                                                                                                            Failed
                                                                                                                            =>
                                                                                                                            Failed,
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                Failed
                                                                                                                =>
                                                                                                                Failed,
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    Failed
                                                                                                    =>
                                                                                                    Failed,
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            };
                        match seq_res {
                            Matched(pos, value) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos,
                                            {
                                                char::from_u32(value.unwrap()
                                                                   as
                                                                   u32).unwrap()
                                            })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_eolEscapeSequence(input: &str, pos: uint) -> ParseResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, pos, "\\");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_eol(input, pos);
                        match seq_res {
                            Matched(pos, eol) => {
                                {
                                    let match_str =
                                        input.slice(start_pos, pos);
                                    Matched(pos, { '\n' })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_digit(input: &str, pos: uint) -> ParseResult<()> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch { '0' ...'9' => Matched(next, ()), _ => Failed, }
    } else { Failed }
}
fn parse_hexDigit(input: &str, pos: uint) -> ParseResult<()> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch {
            '0' ...'9' | 'a' ...'f' | 'A' ...'F' => Matched(next, ()),
            _ => Failed,
        }
    } else { Failed }
}
fn parse_letter(input: &str, pos: uint) -> ParseResult<()> {
    {
        let choice_res = parse_lowerCaseLetter(input, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_upperCaseLetter(input, pos),
        }
    }
}
fn parse_lowerCaseLetter(input: &str, pos: uint) -> ParseResult<()> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch { 'a' ...'z' => Matched(next, ()), _ => Failed, }
    } else { Failed }
}
fn parse_upperCaseLetter(input: &str, pos: uint) -> ParseResult<()> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch { 'A' ...'Z' => Matched(next, ()), _ => Failed, }
    } else { Failed }
}
fn parse___(input: &str, pos: uint) -> ParseResult<()> {
    {
        let mut repeat_pos = pos;
        loop  {
            let pos = repeat_pos;
            let step_res =
                {
                    let choice_res = parse_whitespace(input, pos);
                    match choice_res {
                        Matched(pos, value) => Matched(pos, value),
                        Failed => {
                            let choice_res = parse_eol(input, pos);
                            match choice_res {
                                Matched(pos, value) => Matched(pos, value),
                                Failed => parse_comment(input, pos),
                            }
                        }
                    }
                };
            match step_res {
                Matched(newpos, value) => { repeat_pos = newpos; }
                Failed => { break ; }
            }
        }
        Matched(repeat_pos, ())
    }
}
fn parse_comment(input: &str, pos: uint) -> ParseResult<()> {
    {
        let choice_res = parse_singleLineComment(input, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_multiLineComment(input, pos),
        }
    }
}
fn parse_singleLineComment(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "//");
        match seq_res {
            Matched(pos, _) => {
                {
                    let mut repeat_pos = pos;
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            {
                                let seq_res =
                                    {
                                        let assert_res =
                                            parse_eolChar(input, pos);
                                        match assert_res {
                                            Failed => Matched(pos, ()),
                                            Matched(..) => Failed,
                                        }
                                    };
                                match seq_res {
                                    Matched(pos, _) => {
                                        any_char(input, pos)
                                    }
                                    Failed => Failed,
                                }
                            };
                        match step_res {
                            Matched(newpos, value) => { repeat_pos = newpos; }
                            Failed => { break ; }
                        }
                    }
                    Matched(repeat_pos, ())
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_multiLineComment(input: &str, pos: uint) -> ParseResult<()> {
    {
        let seq_res = slice_eq(input, pos, "/*");
        match seq_res {
            Matched(pos, _) => {
                {
                    let seq_res =
                        {
                            let mut repeat_pos = pos;
                            loop  {
                                let pos = repeat_pos;
                                let step_res =
                                    {
                                        let seq_res =
                                            {
                                                let assert_res =
                                                    slice_eq(input, pos,
                                                             "*/");
                                                match assert_res {
                                                    Failed =>
                                                    Matched(pos, ()),
                                                    Matched(..) => Failed,
                                                }
                                            };
                                        match seq_res {
                                            Matched(pos, _) => {
                                                any_char(input, pos)
                                            }
                                            Failed => Failed,
                                        }
                                    };
                                match step_res {
                                    Matched(newpos, value) => {
                                        repeat_pos = newpos;
                                    }
                                    Failed => { break ; }
                                }
                            }
                            Matched(repeat_pos, ())
                        };
                    match seq_res {
                        Matched(pos, _) => { slice_eq(input, pos, "*/") }
                        Failed => Failed,
                    }
                }
            }
            Failed => Failed,
        }
    }
}
fn parse_eol(input: &str, pos: uint) -> ParseResult<()> {
    {
        let choice_res = slice_eq(input, pos, "\n");
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = slice_eq(input, pos, "\r\n");
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res = slice_eq(input, pos, "\r");
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    slice_eq(input, pos, "\u2028");
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed => slice_eq(input, pos, "\u2029"),
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_eolChar(input: &str, pos: uint) -> ParseResult<()> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch {
            '\n' | '\r' | '\u2028' | '\u2029' => Matched(next, ()),
            _ => Failed,
        }
    } else { Failed }
}
fn parse_whitespace(input: &str, pos: uint) -> ParseResult<()> {
    if input.len() > pos {
        let ::std::str::CharRange { ch: ch, next: next } =
            input.char_range_at(pos);
        match ch {
            ' ' | '\t' | '\xa0' | '\ufeff' | '\u1680' | '\u180e' | '\u2000'
            ...'\u200a' | '\u202f' | '\u205f' | '\u3000' => Matched(next, ()),
            _ => Failed,
        }
    } else { Failed }
}
pub fn grammar(input: &str) -> Result<Grammar, String> {
    match parse_grammar(input, 0) {
        Matched(pos, value) => {
            if pos == input.len() {
                Ok(value)
            } else {
                Err(format!("Expected end of input at {}" , pos_to_line
                            ( input , pos )))
            }
        }
        Failed => Err(format!("Error at ?")),
    }
}
